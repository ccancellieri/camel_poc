<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<!-- START SNIPPET: e1 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:prop="http://camel.apache.org/schema/placeholder"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- <bean id="CamelPropertiesSpringSub" -->
	<!-- class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
	<!-- <property name="locations"> -->
	<!-- <list> -->
	<!-- <value>classpath:camel.properties</value> -->
	<!-- </list> -->
	<!-- </property> -->
	<!-- </bean> -->

	<context:component-scan base-package="it.ccancellieri.camel.poc" />

	<!-- This is the Camel route which asks for input and aggregates incoming 
		numbers -->
	<camelContext id="camel-1" xmlns="http://camel.apache.org/schema/spring" >
		<propertyPlaceholder id="CamelPropertiesSub"
			location="classpath:camel.properties" />

		<onException>
			<!-- the exception is full qualified names as plain strings -->
			<!-- there can be more just add a 2nd, 3rd exception element (unbounded) -->
			<exception>java.lang.Exception</exception>
			<!-- we can set the redelivery policy here as well -->
			<redeliveryPolicy maximumRedeliveries="1" />
			<!-- mark this as handled -->
			<handled>
				<constant>true</constant>
			</handled>
			<!-- and log -->
			<to uri="log://it.ccancellieri?level=error&amp;showStackTrace=true" />
		</onException>

		<route>

			<!-- poll every 10 seconds -->
			<from
				uri="file://{{file.path.in}}?filter=#fileFilterChecker&amp;move={{file.path.out}}&amp;moveFailed={{file.path.err}}{{file.options}}" />

			<!-- ENRICH THE EXCHANGE WITH INFORMATIONS FROM THE PATH -->

			<bean ref="fileExchangeChecker" method="enrichUsingPath" />

			<to uri="seda:splitting" />
		</route>

		<!-- Process csv stream: Body[file://path/to/file.csv] -->
		<route>
			<!-- ACTUALLY READ THE CSV stream -->
			<from uri="seda:splitting" />

<!-- 			<setHeader headerName="csv.row.group"> -->
<!-- 				<constant>2</constant> -->
<!-- 			</setHeader> -->

			<split parallelProcessing="false" stopOnException="false"
				streaming="true">

<!-- 				<tokenize prop:token="csv.row.delimiter" prop:group="csv.row.group" /> -->
				<tokenize token="\n" group="10" />
				<unmarshal>
					<csv autogenColumns="true" delimiter=";" skipFirstLine="false"
						useMaps="true" configRef="csvConfig" lazyLoad="false" />
				</unmarshal>

				<to uri="seda:processing" />
			</split>
		</route>

		<!-- PROCESS PARSED DATA ROWS Body[List<Map<Object,Object>>] -->
		<route>
			<from uri="seda:processing" />
			<process ref="RowChecker" />
			<to uri="seda:stdout" />
		</route>

		<!-- print on the console -->
		<route>
			<from uri="seda:stdout" />
			<to uri="bean:CSVmarshaller?method=doHandleCsvAsListOfMaps" />
			<to uri="stream:out" />
			<to uri="log://it.ccancellieri?level=info&amp;showStackTrace=true" />
		</route>

	</camelContext>

	<bean id="csvConfig" class="org.apache.commons.csv.writer.CSVConfig">
		<property name="fields">
			<list>
				<bean class="org.apache.commons.csv.writer.CSVField">
					<property name="name" value="orderId" />
				</bean>
				<bean class="org.apache.commons.csv.writer.CSVField">
					<property name="name" value="amount" />
				</bean>
			</list>
		</property>
	</bean>

	<bean id="excelStrategy"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField"
			value="org.apache.commons.csv.CSVStrategy.EXCEL_STRATEGY" />
	</bean>

	<bean id="fileFilterChecker"
		class="it.ccancellieri.camel.poc.onboarding.file.FileFilterChecker" />
	<bean id="fileExchangeChecker"
		class="it.ccancellieri.camel.poc.onboarding.file.exchange.FileExchangeChecker" />
	<bean id="CSVmarshaller" class="it.ccancellieri.camel.poc.onboarding.CSVmarshaller" />

	<bean id="RowChecker" class="it.ccancellieri.camel.poc.onboarding.row.RowChecker" />

</beans>
<!-- END SNIPPET: e1 -->
